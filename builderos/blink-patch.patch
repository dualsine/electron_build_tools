From 12d1e1a597fa41d08e1999d37febcedd54014835 Mon Sep 17 00:00:00 2001
From: dualsine <dualsine@gmail.com>
Date: Wed, 28 Nov 2018 14:41:33 +0100
Subject: [PATCH] blink patch

---
 .../renderer/core/css/css_property_id_templates.h   | 13 +------------
 .../blink/renderer/platform/wtf/hash_traits.h       | 12 ++++++++++++
 2 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/third_party/blink/renderer/core/css/css_property_id_templates.h b/third_party/blink/renderer/core/css/css_property_id_templates.h
index 8f32676407..602bad04ee 100644
--- a/third_party/blink/renderer/core/css/css_property_id_templates.h
+++ b/third_party/blink/renderer/core/css/css_property_id_templates.h
@@ -5,7 +5,7 @@
 #ifndef THIRD_PARTY_BLINK_RENDERER_CORE_CSS_CSS_PROPERTY_ID_TEMPLATES_H_
 #define THIRD_PARTY_BLINK_RENDERER_CORE_CSS_CSS_PROPERTY_ID_TEMPLATES_H_

-#include "third_party/blink/renderer/core/css_property_names.h"
+#include "third_party/blink/renderer/core/css_property_names.h"
 #include "third_party/blink/renderer/platform/wtf/hash_functions.h"
 #include "third_party/blink/renderer/platform/wtf/hash_traits.h"

@@ -14,17 +14,6 @@ template <>
 struct DefaultHash<blink::CSSPropertyID> {
   typedef IntHash<unsigned> Hash;
 };
-template <>
-struct HashTraits<blink::CSSPropertyID>
-    : GenericHashTraits<blink::CSSPropertyID> {
-  static const bool kEmptyValueIsZero = true;
-  static void ConstructDeletedValue(blink::CSSPropertyID& slot, bool) {
-    slot = static_cast<blink::CSSPropertyID>(blink::numCSSPropertyIDs);
-  }
-  static bool IsDeletedValue(blink::CSSPropertyID value) {
-    return value == blink::numCSSPropertyIDs;
-  }
-};
 }  // namespace WTF

 #endif  // THIRD_PARTY_BLINK_RENDERER_CORE_CSS_CSS_PROPERTY_ID_TEMPLATES_H_
diff --git a/third_party/blink/renderer/platform/wtf/hash_traits.h b/third_party/blink/renderer/platform/wtf/hash_traits.h
index 59ae473c8e..d96906d4c3 100644
--- a/third_party/blink/renderer/platform/wtf/hash_traits.h
+++ b/third_party/blink/renderer/platform/wtf/hash_traits.h
@@ -33,6 +33,7 @@
 #include "third_party/blink/renderer/platform/wtf/hash_table_deleted_value_type.h"
 #include "third_party/blink/renderer/platform/wtf/std_lib_extras.h"
 #include "third_party/blink/renderer/platform/wtf/type_traits.h"
+#include "third_party/blink/renderer/core/css_property_names.h"

 namespace WTF {

@@ -135,6 +136,17 @@ struct GenericHashTraits
   typedef T PeekOutType;
   static const T& Peek(const T& value) { return value; }
 };
+template <>
+struct HashTraits<blink::CSSPropertyID>
+    : GenericHashTraits<blink::CSSPropertyID> {
+  static const bool kEmptyValueIsZero = true;
+  static void ConstructDeletedValue(blink::CSSPropertyID& slot, bool) {
+    slot = static_cast<blink::CSSPropertyID>(blink::numCSSPropertyIDs);
+  }
+  static bool IsDeletedValue(blink::CSSPropertyID value) {
+    return value == blink::numCSSPropertyIDs;
+  }
+};

 template <typename T>
 struct EnumOrGenericHashTraits<false, T> : GenericHashTraits<T> {};
--
2.20.0.rc1

